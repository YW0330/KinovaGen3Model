//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: MatrixJ.cpp
//
// MATLAB Coder version            : 5.1
// C/C++ source code generated on  : 13-Mar-2022 17:09:26
//

// Include Files
#include "MatrixJ.h"
#include "rt_nonfinite.h"
#include "svd.h"
#include "rt_nonfinite.h"
#include <cmath>
#include <cstring>
#include <math.h>

// Function Definitions
//
// Arguments    : void
// Return Type  : void
//
MatrixJ::MatrixJ()
{
}

//
// Arguments    : void
// Return Type  : void
//
MatrixJ::~MatrixJ()
{
  // (no terminate code required)
}

//
// MODEL_J
//     JACOBI = MODEL_J(Q1,Q2,Q3,Q4,Q5,Q6,Q7)
// Arguments    : double q1
//                double q2
//                double q3
//                double q4
//                double q5
//                double q6
//                double q7
//                double Jacobi[42]
//                double Jacobi_inv[42]
//                double Jacobi_tra[42]
// Return Type  : void
//
void MatrixJ::model_J(double q1, double q2, double q3, double q4, double q5,
                      double q6, double, double Jacobi[42], double Jacobi_inv[42],
                      double Jacobi_tra[42])
{
  double C[42];
  double U[42];
  double V[36];
  double s[6];
  double Jacobi_tmp;
  double Jacobi_tmp_tmp;
  double b_Jacobi_tmp;
  double b_t42_tmp;
  double b_t52_tmp;
  double c_Jacobi_tmp;
  double d_Jacobi_tmp;
  double e_Jacobi_tmp;
  double f_Jacobi_tmp;
  double g_Jacobi_tmp;
  double h_Jacobi_tmp;
  double i_Jacobi_tmp;
  double j_Jacobi_tmp;
  double k_Jacobi_tmp;
  double l_Jacobi_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t18;
  double t19;
  double t2;
  double t20;
  double t21;
  double t22;
  double t23;
  double t23_tmp;
  double t24;
  double t3;
  double t37;
  double t38;
  double t39;
  double t4;
  double t40;
  double t40_tmp;
  double t41;
  double t41_tmp;
  double t42;
  double t42_tmp;
  double t43;
  double t45;
  double t47;
  double t48;
  double t5;
  double t50;
  double t51;
  double t52;
  double t52_tmp;
  double t53;
  double t53_tmp;
  double t54;
  double t54_tmp;
  double t57;
  double t58;
  double t6;
  double t7;
  double t8;
  double t9;
  int ar;
  int br;
  int i;
  int ib;
  int j;
  int vcol;
  boolean_T p;

  //     This function was generated by the Symbolic Math Toolbox version 8.6.
  //     11-Mar-2022 16:42:38
  t2 = std::cos(q1);
  t3 = std::cos(q2);
  t4 = std::cos(q3);
  t5 = std::cos(q4);
  t6 = std::cos(q5);
  t7 = std::cos(q6);
  t8 = std::sin(q1);
  t9 = std::sin(q2);
  t10 = std::sin(q3);
  t11 = std::sin(q4);
  t12 = std::sin(q5);
  t13 = std::sin(q6);
  t14 = t2 * t4;
  t15 = t3 * t5;
  t16 = t2 * t10;
  t17 = t4 * t8;
  t18 = t3 * t11;
  t19 = t8 * t10;
  t22 = t4 * t5 * t9;
  t23_tmp = t2 * t9;
  t23 = t23_tmp * t11;
  t24 = t5 * t8 * t9;
  t20 = t3 * t16;
  t21 = t3 * t17;
  t39 = t18 + t22;
  t42_tmp = t4 * t9;
  b_t42_tmp = t42_tmp * t11;
  t42 = t15 + -b_t42_tmp;
  t37 = t16 + t21;
  t38 = t17 + t20;
  t40_tmp = t3 * t19;
  t40 = t14 + -t40_tmp;
  t41_tmp = t3 * t14;
  t41 = t19 + -t41_tmp;
  t43 = t5 * t37;
  t45 = t11 * t37;
  t47 = t5 * t41;
  t48 = t11 * t41;
  t53_tmp = t9 * t10;
  t53 = -(t53_tmp * t12) + t6 * t39;
  t50 = t24 + t45;
  t51 = t23 + t47;
  t52_tmp = t8 * t9;
  b_t52_tmp = t52_tmp * t11;
  t52 = -b_t52_tmp + t43;
  t54_tmp = t2 * t5 * t9;
  t54 = -t54_tmp + t48;
  t57 = t12 * t38 + t6 * t51;
  t58 = t12 * t40 + t6 * t52;
  Jacobi_tmp = t7 * t50;
  b_Jacobi_tmp = t13 * t58;
  c_Jacobi_tmp = ((((((t2 * -0.011799999999993821 - t14 * 0.01279999999997017) -
                      t24 * 0.31429999999818392) - t45 * 0.31429999999818392) -
                    t52_tmp * 0.42079999999987189) + t40_tmp *
                   0.01279999999997017) - Jacobi_tmp * 0.22539999999935389) -
    b_Jacobi_tmp * 0.22539999999935389;
  Jacobi[0] = c_Jacobi_tmp;
  d_Jacobi_tmp = t7 * t54;
  e_Jacobi_tmp = t13 * t57;
  f_Jacobi_tmp = ((((((t8 * 0.011799999999993821 + t17 * 0.01279999999997017) +
                      t20 * 0.01279999999997017) + t48 * 0.31429999999818392) -
                    t23_tmp * 0.42079999999987189) + d_Jacobi_tmp *
                   0.22539999999935389) + e_Jacobi_tmp * 0.22539999999935389) -
    t54_tmp * 0.31429999999818392;
  Jacobi[1] = f_Jacobi_tmp;
  Jacobi[2] = 0.0;
  Jacobi[3] = 0.0;
  Jacobi[4] = 0.0;
  Jacobi[5] = -1.0;
  g_Jacobi_tmp = t2 * t15;
  Jacobi_tmp_tmp = t9 * t11;
  h_Jacobi_tmp = Jacobi_tmp_tmp * t14;
  i_Jacobi_tmp = t5 * t9;
  j_Jacobi_tmp = t9 * t12;
  g_Jacobi_tmp = ((((t2 * t3 * 0.42079999999987189 + g_Jacobi_tmp *
                     0.31429999999818392) + t9 * t16 * 0.01279999999997017) -
                   t13 * (t6 * (t2 * t18 + i_Jacobi_tmp * t14) - j_Jacobi_tmp *
    t16) * 0.22539999999935389) + t7 * (g_Jacobi_tmp - h_Jacobi_tmp) *
                  0.22539999999935389) - h_Jacobi_tmp * 0.31429999999818392;
  Jacobi[6] = g_Jacobi_tmp;
  h_Jacobi_tmp = t8 * t15;
  k_Jacobi_tmp = Jacobi_tmp_tmp * t17;
  h_Jacobi_tmp = ((((t3 * t8 * -0.42079999999987189 - h_Jacobi_tmp *
                     0.31429999999818392) - t9 * t19 * 0.01279999999997017) +
                   t13 * (t6 * (t8 * t18 + i_Jacobi_tmp * t17) - j_Jacobi_tmp *
    t19) * 0.22539999999935389) - t7 * (h_Jacobi_tmp - k_Jacobi_tmp) *
                  0.22539999999935389) + k_Jacobi_tmp * 0.31429999999818392;
  Jacobi[7] = h_Jacobi_tmp;
  j_Jacobi_tmp = t4 * t18;
  k_Jacobi_tmp = t3 * t10;
  i_Jacobi_tmp = ((((t9 * -0.42079999999987189 + k_Jacobi_tmp *
                     0.01279999999997017) - i_Jacobi_tmp * 0.31429999999818392)
                   - j_Jacobi_tmp * 0.31429999999818392) - t7 * (i_Jacobi_tmp +
    j_Jacobi_tmp) * 0.22539999999935389) - t13 * (t6 * (t4 * t15 -
    Jacobi_tmp_tmp) - k_Jacobi_tmp * t12) * 0.22539999999935389;
  Jacobi[8] = i_Jacobi_tmp;
  Jacobi[9] = t8;
  Jacobi[10] = t2;
  Jacobi[11] = 0.0;
  j_Jacobi_tmp = t5 * t6;
  k_Jacobi_tmp = t7 * t11;
  l_Jacobi_tmp = (((t19 * 0.01279999999997017 - t41_tmp * 0.01279999999997017) -
                   t11 * t38 * 0.31429999999818392) + t13 * (t12 * t41 -
    j_Jacobi_tmp * t38) * 0.22539999999935389) - k_Jacobi_tmp * t38 *
    0.22539999999935389;
  Jacobi[12] = l_Jacobi_tmp;
  k_Jacobi_tmp = (((t16 * 0.01279999999997017 + t21 * 0.01279999999997017) - t11
                   * t40 * 0.31429999999818392) + t13 * (t12 * t37 -
    j_Jacobi_tmp * t40) * 0.22539999999935389) - k_Jacobi_tmp * t40 *
    0.22539999999935389;
  Jacobi[13] = k_Jacobi_tmp;
  j_Jacobi_tmp = ((t13 * (t42_tmp * t12 + j_Jacobi_tmp * t9 * t10) *
                   0.22539999999935389 + t42_tmp * 0.01279999999997017) +
                  t53_tmp * t11 * 0.31429999999818392) + t7 * t9 * t10 * t11 *
    0.22539999999935389;
  Jacobi[14] = j_Jacobi_tmp;
  Jacobi[15] = -t23_tmp;
  Jacobi[16] = t52_tmp;
  Jacobi[17] = -t3;
  t41 = t6 * t13;
  t41_tmp = ((t23 * -0.31429999999818392 - t47 * 0.31429999999818392) - t7 * t51
             * 0.22539999999935389) + t41 * t54 * 0.22539999999935389;
  Jacobi[18] = t41_tmp;
  t19 = ((t43 * -0.31429999999818392 - t7 * t52 * 0.22539999999935389) +
         b_t52_tmp * 0.31429999999818392) + t41 * t50 * 0.22539999999935389;
  Jacobi[19] = t19;
  t41 = ((t18 * -0.31429999999818392 - t22 * 0.31429999999818392) - t7 * t39 *
         0.22539999999935389) - t41 * t42 * 0.22539999999935389;
  Jacobi[20] = t41;
  Jacobi[21] = t38;
  Jacobi[22] = t40;
  Jacobi[23] = -t53_tmp;
  t5 = t6 * t38 - t12 * t51;
  t17 = t13 * t5 * -0.22539999999935389;
  Jacobi[24] = t17;
  t14 = t6 * t40 - t12 * t52;
  t4 = t13 * t14 * -0.22539999999935389;
  Jacobi[25] = t4;
  Jacobi_tmp_tmp = t12 * t39;
  t48 = t6 * t9 * t10;
  t54_tmp = t13 * (Jacobi_tmp_tmp + t48) * 0.22539999999935389;
  Jacobi[26] = t54_tmp;
  Jacobi[27] = t54;
  Jacobi[28] = t50;
  t20 = -t15 + b_t42_tmp;
  Jacobi[29] = t20;
  t45 = t7 * t57 * -0.22539999999935389 + t13 * t54 * 0.22539999999935389;
  Jacobi[30] = t45;
  t24 = t13 * t50 * 0.22539999999935389 - t7 * t58 * 0.22539999999935389;
  Jacobi[31] = t24;
  t40_tmp = t13 * t42 * -0.22539999999935389 - t7 * t53 * 0.22539999999935389;
  Jacobi[32] = t40_tmp;
  Jacobi[33] = t5;
  Jacobi[34] = t14;
  Jacobi_tmp_tmp = -Jacobi_tmp_tmp - t48;
  Jacobi[35] = Jacobi_tmp_tmp;
  Jacobi[36] = 0.0;
  Jacobi[37] = 0.0;
  Jacobi[38] = 0.0;
  d_Jacobi_tmp = -d_Jacobi_tmp - e_Jacobi_tmp;
  Jacobi[39] = d_Jacobi_tmp;
  Jacobi_tmp = -Jacobi_tmp - b_Jacobi_tmp;
  Jacobi[40] = Jacobi_tmp;
  b_Jacobi_tmp = t7 * t42 - t13 * t53;
  Jacobi[41] = b_Jacobi_tmp;
  Jacobi_tra[0] = c_Jacobi_tmp;
  Jacobi_tra[7] = f_Jacobi_tmp;
  Jacobi_tra[14] = 0.0;
  Jacobi_tra[21] = 0.0;
  Jacobi_tra[28] = 0.0;
  Jacobi_tra[35] = -1.0;
  Jacobi_tra[1] = g_Jacobi_tmp;
  Jacobi_tra[8] = h_Jacobi_tmp;
  Jacobi_tra[15] = i_Jacobi_tmp;
  Jacobi_tra[22] = t8;
  Jacobi_tra[29] = t2;
  Jacobi_tra[36] = 0.0;
  Jacobi_tra[2] = l_Jacobi_tmp;
  Jacobi_tra[9] = k_Jacobi_tmp;
  Jacobi_tra[16] = j_Jacobi_tmp;
  Jacobi_tra[23] = -(t2 * t9);
  Jacobi_tra[30] = t52_tmp;
  Jacobi_tra[37] = -t3;
  Jacobi_tra[3] = t41_tmp;
  Jacobi_tra[10] = t19;
  Jacobi_tra[17] = t41;
  Jacobi_tra[24] = t38;
  Jacobi_tra[31] = t40;
  Jacobi_tra[38] = -(t9 * t10);
  Jacobi_tra[4] = t17;
  Jacobi_tra[11] = t4;
  Jacobi_tra[18] = t54_tmp;
  Jacobi_tra[25] = t54;
  Jacobi_tra[32] = t50;
  Jacobi_tra[39] = t20;
  Jacobi_tra[5] = t45;
  Jacobi_tra[12] = t24;
  Jacobi_tra[19] = t40_tmp;
  Jacobi_tra[26] = t5;
  Jacobi_tra[33] = t14;
  Jacobi_tra[40] = Jacobi_tmp_tmp;
  Jacobi_tra[6] = 0.0;
  Jacobi_tra[13] = 0.0;
  Jacobi_tra[20] = 0.0;
  Jacobi_tra[27] = d_Jacobi_tmp;
  Jacobi_tra[34] = Jacobi_tmp;
  Jacobi_tra[41] = b_Jacobi_tmp;
  p = true;
  for (br = 0; br < 42; br++) {
    C[br] = 0.0;
    if ((!p) || rtIsNaN(Jacobi_tra[br])) {
      p = false;
    }
  }

  if (!p) {
    for (i = 0; i < 42; i++) {
      C[i] = rtNaN;
    }
  } else {
    int r;
    coder::internal::svd(Jacobi_tra, U, s, V);
    t24 = std::abs(s[0]);
    if ((!rtIsInf(t24)) && (!rtIsNaN(t24))) {
      if (t24 <= 2.2250738585072014E-308) {
        t24 = 4.94065645841247E-324;
      } else {
        frexp(t24, &vcol);
        t24 = std::ldexp(1.0, vcol - 53);
      }
    } else {
      t24 = rtNaN;
    }

    t24 *= 7.0;
    r = -1;
    br = 0;
    while ((br < 6) && (s[br] > t24)) {
      r++;
      br++;
    }

    if (r + 1 > 0) {
      vcol = 1;
      for (j = 0; j <= r; j++) {
        t24 = 1.0 / s[j];
        i = vcol + 5;
        for (br = vcol; br <= i; br++) {
          V[br - 1] *= t24;
        }

        vcol += 6;
      }

      for (vcol = 0; vcol <= 36; vcol += 6) {
        i = vcol + 1;
        j = vcol + 6;
        if (i <= j) {
          std::memset(&C[i + -1], 0, ((j - i) + 1) * sizeof(double));
        }
      }

      br = 0;
      for (vcol = 0; vcol <= 36; vcol += 6) {
        ar = -1;
        br++;
        i = br + 7 * r;
        for (ib = br; ib <= i; ib += 7) {
          int i1;
          int ia;
          ia = ar;
          j = vcol + 1;
          i1 = vcol + 6;
          for (int ic = j; ic <= i1; ic++) {
            ia++;
            C[ic - 1] += U[ib - 1] * V[ia];
          }

          ar += 6;
        }
      }
    }
  }

  for (i = 0; i < 6; i++) {
    for (j = 0; j < 7; j++) {
      Jacobi_inv[j + 7 * i] = C[i + 6 * j];
    }
  }
}

//
// File trailer for MatrixJ.cpp
//
// [EOF]
//
