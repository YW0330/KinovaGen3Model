//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// kinova_G.cpp
//
// Code generation for function 'kinova_G'
//

// Include files
#include "kinova_G.h"
#include <cmath>

// Function Definitions
void kinova_G(double g, double q1, double q2, double q3, double q4, double q5,
              double q6, double q7, double G[7])
{
  double t10;
  double t105;
  double t105_tmp;
  double t11;
  double t110;
  double t111;
  double t112;
  double t116;
  double t12;
  double t120;
  double t122;
  double t122_tmp;
  double t123;
  double t129;
  double t13;
  double t130;
  double t132;
  double t132_tmp;
  double t137;
  double t139;
  double t14;
  double t141;
  double t142;
  double t143;
  double t144;
  double t146;
  double t15;
  double t151;
  double t154;
  double t160;
  double t166_tmp;
  double t167;
  double t2;
  double t24;
  double t25;
  double t27;
  double t28;
  double t29;
  double t3;
  double t30;
  double t31;
  double t33_tmp;
  double t35;
  double t36_tmp;
  double t38_tmp;
  double t4;
  double t42;
  double t45;
  double t46;
  double t46_tmp;
  double t48;
  double t49;
  double t5;
  double t51;
  double t6;
  double t60;
  double t62;
  double t63;
  double t64;
  double t65;
  double t7;
  double t71;
  double t72;
  double t73;
  double t74;
  double t8;
  double t80;
  double t81;
  double t83;
  double t86;
  double t87;
  double t89;
  double t9;
  double t93;
  double t94;
  double t95;
  double t96;
  double t97;
  // KINOVA_G
  //     G =
  //     KINOVA_G(X2,X3,X4,X5,X6,X7,Y2,Y3,Y4,Y5,Y6,Y7,Z2,Z3,Z4,Z5,Z6,Z7,D3,D4,D5,D6,D7,D8,D9,D10,D11,G,M2,M3,M4,M5,M6,M7,Q1,Q2,Q3,Q4,Q5,Q6,Q7)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     31-Jul-2022 13:44:32
  //  參數設定
  t2 = std::cos(q1);
  t3 = std::cos(q2);
  t4 = std::cos(q3);
  t5 = std::cos(q4);
  t6 = std::cos(q5);
  t7 = std::cos(q6);
  t8 = std::cos(q7);
  t9 = std::sin(q1);
  t10 = std::sin(q2);
  t11 = std::sin(q3);
  t12 = std::sin(q4);
  t13 = std::sin(q5);
  t14 = std::sin(q6);
  t15 = std::sin(q7);
  t24 = 0.0064 * t2;
  t25 = 0.0064 * t9;
  t27 = t2 * t4;
  t28 = t2 * t11;
  t29 = t4 * t9;
  t30 = t9 * t11;
  t33_tmp = 0.2104 * t2 * t10;
  t36_tmp = 0.2104 * t9 * t10;
  t38_tmp = t9 * t10;
  t42 = t2 * t5 * t10;
  t45 = t5 * t9 * t10;
  t46_tmp = t2 * t10;
  t46 = t46_tmp * 0.092508;
  t31 = 0.0064 * t27;
  t35 = 0.0064 * t29;
  t4 = t3 * t28;
  t11 = t3 * t30;
  t49 = 0.2084 * t42;
  t51 = 0.2084 * t45;
  t48 = 0.0064 * t4;
  t60 = -0.0064 * t11;
  t10 = t28 + t3 * t29;
  t62 = t29 + t4;
  t63 = -4.4E-5 * t10;
  t64 = 0.0064 * t62;
  t65 = t27 + -t11;
  t11 = t30 + -(t3 * t27);
  t4 = t12 * t10;
  t74 = -0.0086059999999999991 * t62;
  t83 = -0.013041 * t62;
  t71 = 0.2084 * t4;
  t72 = -4.4E-5 * t11;
  t73 = 0.0064 * t65;
  t28 = t12 * t11;
  t81 = -0.0086059999999999991 * t65;
  t86 = -0.013041 * t65;
  t87 = t45 + t4;
  t4 = t38_tmp * t12 - t5 * t10;
  t97 = 1.8E-5 * t4;
  t80 = 0.2084 * t28;
  t89 = 0.1059 * t87;
  t11 = t46_tmp * t12 + t5 * t11;
  t10 = t7 * t87;
  t93 = 0.13292199999999998 * t87;
  t94 = 0.042017 * t87;
  t105_tmp = t42 - t28;
  t105 = -0.1059 * t105_tmp;
  t29 = -t7 * t105_tmp;
  t111 = 0.13292199999999998 * t105_tmp;
  t112 = 0.042017 * t105_tmp;
  t28 = t13 * t65 + -t6 * t4;
  t132_tmp = t6 * t65 + t13 * t4;
  t132 = 0.00965 * t132_tmp;
  t137 = -0.009432 * t132_tmp;
  t95 = 0.1059 * t10;
  t96 = -1.8E-5 * t11;
  t110 = 0.1059 * t29;
  t123 = 1.0E-6 * t28;
  t4 = t14 * t28;
  t30 = t13 * t62 + t6 * t11;
  t122_tmp = t6 * t62 - t13 * t11;
  t122 = 0.00965 * t122_tmp;
  t129 = 0.1059 * t4;
  t130 = -0.009432 * t122_tmp;
  t139 = t10 + t4;
  t116 = 1.0E-6 * t30;
  t4 = t14 * t30;
  t11 = t14 * t87 + -(t7 * t28);
  t141 = 0.0615 * t139;
  t143 = 0.060416999999999992 * t139;
  t144 = 0.031701999999999994 * t139;
  t120 = 0.1059 * t4;
  t142 = t29 + t4;
  t146 = 1.0E-6 * t11;
  t4 = t7 * t30 + t14 * t105_tmp;
  t154 = -1.0E-6 * t4;
  t160 = 1.0E-6 * t4;
  t167 = -0.000281 * (t8 * t4 + t15 * t122_tmp);
  t6 = 0.011402 * (-t8 * t122_tmp + t15 * t4);
  t13 = 0.0615 * t142;
  t14 = 0.060416999999999992 * t142;
  t151 = 0.031701999999999994 * t142;
  t166_tmp = -0.000281 * (-t15 * t132_tmp + t8 * t11);
  t10 = -0.011402 * (t8 * t132_tmp + t15 * t11);
  G[0] = 0.0;
  t28 = ((t24 + t31) + t36_tmp) + t36_tmp;
  t29 = t25 + t35;
  t4 = (((t28 + t51) + t60) + t71) + t73;
  t30 = t4 + t89;
  t27 = (t30 + t95) + t129;
  t11 = (((((t29 + t48) + -t33_tmp) + -t33_tmp) + -t49) + t64) + t80;
  t45 = t11 + t105;
  t5 = (t45 + t110) + t120;
  t12 = -(t38_tmp * 0.092508);
  t42 = -g * 0.678;
  G[1] = (((-g * 1.1636 *
                (t9 * ((((t28 + t12) + t60) + t63) + t86) -
                 t2 * ((((((t29 + t46) + t48) + -t33_tmp) + -t33_tmp) + t72) +
                       t83)) -
            g * 1.1636 *
                (t2 * ((((-t25 + t33_tmp) + t9 * -0.0068779999999999996) +
                        -4.4E-5 * t2 * t3) -
                       t46_tmp * 0.11082) +
                 t9 * ((((t24 + t36_tmp) - t2 * -0.0068779999999999996) +
                        -4.4E-5 * t3 * t9) -
                       t38_tmp * 0.11082))) -
           g * 0.5 *
               (t9 * ((((t27 + t141) + -(0.031701999999999994 * t139)) +
                       -t166_tmp) +
                      t10) -
                t2 * ((((t5 + t13) + -(0.031701999999999994 * t142)) + t167) +
                      t6))) -
          g * 0.678 *
              (t9 * (((t27 + t132) + -t143) + -t146) -
               t2 * (((t5 + t122) + -t14) + t160))) +
         (t42 * (t9 * (((t30 + -(0.042017 * t87)) + t123) + t137) -
                 t2 * (((t45 + t112) + t116) + t130)) -
          g * 0.93 *
              (t9 * (((t4 + -(-0.0086059999999999991 * t65)) + t97) +
                     -(0.13292199999999998 * t87)) -
               t2 * (((t11 + -(-0.0086059999999999991 * t62)) + t96) + t111)));
  t28 = t31 + t36_tmp;
  t29 = (((t28 + t51) + t60) + t71) + t73;
  t27 = ((((t35 + t48) + -t33_tmp) + -t49) + t64) + t80;
  t30 = t29 + t89;
  t5 = (t30 + t95) + t129;
  t45 = t27 + t105;
  t4 = (t45 + t110) + t120;
  G[2] = (((g * 0.93 *
                (t46_tmp * (((t29 + -t81) + t97) + -t93) +
                 t38_tmp * (((t27 + -t74) + t96) + t111)) +
            g * 1.1636 *
                (t46_tmp * ((((t28 + t12) + t60) + t63) + t86) +
                 t38_tmp * (((((t35 + t46) + t48) + -t33_tmp) + t72) + t83))) +
           g * 0.5 *
               (t46_tmp * ((((t5 + t141) + -t144) + -t166_tmp) + t10) +
                t38_tmp * ((((t4 + t13) + -t151) + t167) + t6))) +
          g * 0.678 *
              (t46_tmp * (((t5 + t132) + -t143) + -t146) +
               t38_tmp * (((t4 + t122) + -t14) + t160))) +
         g * 0.678 *
             (t46_tmp * (((t30 + -t94) + t123) + t137) +
              t38_tmp * (((t45 + t112) + t116) + t130));
  t30 = (-t49 + t64) + t80;
  t28 = t30 + t105;
  t45 = (t51 + t71) + t73;
  t29 = t45 + t89;
  t27 = (t29 + t95) + t129;
  t5 = -0.00965 * t122_tmp;
  t12 = 0.1059 * t105_tmp;
  t4 = 0.1059 * t7 * t105_tmp;
  G[3] =
      ((t42 * (t62 * (((t29 + -t94) + t123) + t137) -
               t65 * (((t28 + t112) + t116) + t130)) +
        g * 0.5 *
            (t65 * ((((((t28 + t110) + t120) + t13) + -t151) + t167) + t6) -
             t62 * ((((t27 + t141) + -t144) + -t166_tmp) + t10))) -
       g * 0.93 *
           (t62 * (((t45 + -t81) + t97) + -t93) -
            t65 * (((t30 + -t74) + t96) + t111))) -
      g * 0.678 *
          (t62 * (((t27 + t132) + -t143) + -t146) +
           t65 * ((((((((t49 - t64) - t80) - t120) + t14) + t154) + t5) + t12) +
                  t4));
  t28 = (t89 + t95) + t129;
  t29 = ((-t120 + t14) + t154) + t5;
  G[4] = (g * 0.678 *
              (t105_tmp * (((t28 + t132) + -t143) + -t146) -
               t87 * ((t29 + t12) + t4)) +
          g * 0.5 *
              (t87 * ((((((t105 + t110) + t120) + t13) + -t151) + t167) + t6) +
               t105_tmp * ((((t28 + t141) + -t144) + -t166_tmp) + t10))) +
         g * 0.678 *
             (t87 * (((t105 + t112) + t116) + t130) +
              t105_tmp * (((t89 + -t94) + t123) + t137));
  t28 = -g * 0.5;
  G[5] =
      t28 * (t122_tmp * (((((t95 + t129) + t141) + -t144) + -t166_tmp) + t10) -
             t132_tmp * (((((t110 + t120) + t13) + -t151) + t167) + t6)) -
      g * 0.678 *
          (t132_tmp * (t29 + t4) -
           t122_tmp * ((((-t95 - t129) + t143) + t146) + -0.00965 * t132_tmp));
  G[6] = t28 * (t142 * (((t141 + -t144) + -t166_tmp) + t10) -
                t139 * (((t13 + -t151) + t167) + t6));
}

// End of code generation (kinova_G.cpp)
