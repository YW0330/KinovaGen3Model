//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// kinova_psi_jointAngleLimits.cpp
//
// Code generation for function 'kinova_psi_jointAngleLimits'
//

// Include files
#include "kinova_psi_jointAngleLimits.h"

// Function Definitions
void kinova_psi_jointAngleLimits(double q1, double q2, double q3, double q4,
                                 double q5, double q6, double q7, double q1min,
                                 double q2min, double q3min, double q4min,
                                 double q5min, double q6min, double q7min,
                                 double q1max, double q2max, double q3max,
                                 double q4max, double q5max, double q6max,
                                 double q7max, double psi[7])
{
  double psi_tmp;
  double t32;
  double t33;
  double t34;
  double t35;
  double t36;
  double t37;
  double t38;
  double t39;
  double t40;
  double t41;
  double t42;
  double t43;
  // KINOVA_PSI_JOINTANGLELIMITS
  //     PHI =
  //     KINOVA_PSI_JOINTANGLELIMITS(Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q1MIN,Q2MIN,Q1MAX,Q3MIN,Q2MAX,Q4MIN,Q3MAX,Q5MIN,Q4MAX,Q6MIN,Q5MAX,Q7MIN,Q6MAX,Q7MAX)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     28-Aug-2022 23:59:24
  t32 = q2 + -q2min;
  t33 = q2 + -q2max;
  t34 = q3 + -q3min;
  t35 = q3 + -q3max;
  t36 = q4 + -q4min;
  t37 = q4 + -q4max;
  t38 = q5 + -q5min;
  t39 = q5 + -q5max;
  t40 = q6 + -q6min;
  t41 = q6 + -q6max;
  t42 = q7 + -q7min;
  t43 = q7 + -q7max;
  psi_tmp = 1.0 / q1min * (1.0 / q2min) * (1.0 / q1max) * (1.0 / q3min) *
            (1.0 / q2max) * (1.0 / q4min) * (1.0 / q3max) * (1.0 / q5min) *
            (1.0 / q4max) * (1.0 / q6min) * (1.0 / q5max) * (1.0 / q7min) *
            (1.0 / q6max) * (1.0 / q7max);
  psi[0] = psi_tmp * t32 * t33 * t34 * t35 * t36 * t37 * t38 * t39 * t40 * t41 *
           t42 * t43 * ((q1 * -2.0 + q1min) + q1max);
  psi_tmp = psi_tmp * (q1 + -q1min) * (q1 + -q1max);
  psi[1] = psi_tmp * t34 * t35 * t36 * t37 * t38 * t39 * t40 * t41 * t42 * t43 *
           ((q2 * -2.0 + q2min) + q2max);
  psi_tmp = psi_tmp * t32 * t33;
  psi[2] = psi_tmp * t36 * t37 * t38 * t39 * t40 * t41 * t42 * t43 *
           ((q3 * -2.0 + q3min) + q3max);
  psi_tmp = psi_tmp * t34 * t35;
  psi[3] = psi_tmp * t38 * t39 * t40 * t41 * t42 * t43 *
           ((q4 * -2.0 + q4min) + q4max);
  psi_tmp = psi_tmp * t36 * t37;
  psi[4] = psi_tmp * t40 * t41 * t42 * t43 * ((q5 * -2.0 + q5min) + q5max);
  psi_tmp = psi_tmp * t38 * t39;
  psi[5] = psi_tmp * t42 * t43 * ((q6 * -2.0 + q6min) + q6max);
  psi[6] = psi_tmp * t40 * t41 * ((q7 * -2.0 + q7min) + q7max);
}

// End of code generation (kinova_psi_jointAngleLimits.cpp)
