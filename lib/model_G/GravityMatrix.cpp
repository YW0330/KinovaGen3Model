//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// GravityMatrix.cpp
//
// Code generation for function 'GravityMatrix'
//

// Include files
#include "GravityMatrix.h"
#include <cmath>

// Function Definitions
GravityMatrix::GravityMatrix()
{
}

GravityMatrix::~GravityMatrix()
{
  // (no terminate code required)
}

void GravityMatrix::model_G(double, double q2, double q3, double q4, double q5,
                            double q6, double q7, double g, double G[7])
{
  double b_t57_tmp;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t18;
  double t19;
  double t2;
  double t20;
  double t21;
  double t21_tmp;
  double t22;
  double t22_tmp;
  double t23;
  double t3;
  double t32;
  double t37;
  double t38;
  double t39;
  double t39_tmp;
  double t4;
  double t40_tmp;
  double t41;
  double t42;
  double t43;
  double t44;
  double t45;
  double t46;
  double t49_tmp;
  double t5;
  double t51;
  double t51_tmp;
  double t52;
  double t55;
  double t56;
  double t57;
  double t57_tmp;
  double t58;
  double t58_tmp;
  double t59;
  double t6;
  double t60;
  double t61;
  double t62;
  double t62_tmp;
  double t63;
  double t64;
  double t65;
  double t66;
  double t7;
  double t8;
  double t9;
  // MODEL_G
  //     G = MODEL_G(Q1,Q2,Q3,Q4,Q5,Q6,Q7,G)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2021 18:17:38
  t2 = std::cos(q2);
  t3 = std::cos(q3);
  t4 = std::cos(q4);
  t5 = std::cos(q5);
  t6 = std::cos(q6);
  t7 = std::cos(q7);
  t8 = std::sin(q2);
  t9 = std::sin(q3);
  t10 = std::sin(q4);
  t11 = std::sin(q5);
  t12 = std::sin(q6);
  t13 = std::sin(q7);
  t14 = t2 * t4;
  t15 = t2 * t10;
  t16 = t4 * t8;
  t17 = t8 * t10;
  t20 = t3 * t5 * t8;
  t21_tmp = t2 * t9;
  t21 = t21_tmp * t11;
  t22_tmp = t3 * t8;
  t22 = t22_tmp * t11;
  t23 = t5 * t8 * t9;
  t18 = t3 * t15;
  t19 = t3 * t16;
  t32 = t5 * t9 * t16;
  t37 = t15 + t19;
  t38 = t16 + t18;
  t39_tmp = t3 * t17;
  t39 = t14 + -t39_tmp;
  t40_tmp = t3 * t14;
  t4 = t17 + -t40_tmp;
  t45 = t22 + t32;
  t51_tmp = t9 * t11 * t16;
  t51 = t20 + -t51_tmp;
  t41 = t5 * t37;
  t42 = t11 * t37;
  t43 = t12 * t37;
  t44 = t12 * t38;
  t46 = t5 * t4;
  t4 *= t11;
  t10 = t12 * t39;
  t49_tmp = t6 * t39;
  t52 = t6 * t45;
  t55 = t23 + t42;
  t56 = t21 + t46;
  t57_tmp = t8 * t9;
  b_t57_tmp = t57_tmp * t11;
  t57 = -b_t57_tmp + t41;
  t58_tmp = t2 * t5 * t9;
  t58 = -t58_tmp + t4;
  t62_tmp = t9 * t12 * t17;
  t62 = -t62_tmp + t52;
  t59 = t6 * t56;
  t60 = t6 * t57;
  t61 = t12 * t57;
  t63 = t43 + t5 * -t49_tmp;
  t64 = t44 + t59;
  t65 = t10 + t60;
  t66 = -t49_tmp + t61;
  G[0] = 0.0;
  G[1] =
      -(g *
        (((((((((((((((((((t2 * 5.1198399999563549E-5 - t8 * 2.21454580000136) -
                          t16 * 0.91577531400253065) -
                         t17 * 1.6739999999959568E-5) -
                        t18 * 0.91577531400253065) +
                       t21 * 6.7800000000395322E-7) +
                      t44 * 6.7800000000395322E-7) +
                     t46 * 6.7800000000395322E-7) -
                    t4 * 0.00014780400000091731) +
                   t59 * 6.7800000000395322E-7) +
                  t2 * t3 * 7.1983999999858383E-5) +
                 t21_tmp * 0.044639703999564517) +
                t40_tmp * 1.6739999999959568E-5) -
               t6 * t38 * 0.41818147400044842) +
              t7 * t58 * 0.0057010000000445871) +
             t12 * t56 * 0.41818147400044842) -
            t7 * t64 * 0.000140500000000543) +
           t13 * t58 * 0.000140500000000543) +
          t13 * t64 * 0.0057010000000445871) +
         t58_tmp * 0.00014780400000091731));
  G[2] = -(g * (((((((((((((((t20 * 0.00014780400000091731 +
                              t22 * 6.7800000000395322E-7) +
                             t32 * 6.7800000000395322E-7) +
                            t52 * 6.7800000000395322E-7) +
                           t22_tmp * 0.044639703999564517) -
                          t57_tmp * 7.1983999999858383E-5) -
                         t9 * t16 * 1.6739999999959568E-5) +
                        t9 * t17 * 0.91577531400253065) +
                       t12 * t45 * 0.41818147400044842) -
                      t7 * t51 * 0.0057010000000445871) -
                     t13 * t51 * 0.000140500000000543) -
                    t7 * t62 * 0.000140500000000543) +
                   t13 * t62 * 0.0057010000000445871) +
                  t6 * t9 * t17 * 0.41818147400044842) -
                 t51_tmp * 0.00014780400000091731) -
                t62_tmp * 6.7800000000395322E-7));
  G[3] =
      g *
      (((((((((((((t14 * -1.6739999999959568E-5 + t15 * 0.91577531400253065) +
                  t19 * 0.91577531400253065) -
                 t43 * 6.7800000000395322E-7) +
                t39_tmp * 1.6739999999959568E-5) +
               t6 * t37 * 0.41818147400044842) +
              t5 * t39 * 6.7800000000395322E-7) -
             t11 * t39 * 0.00014780400000091731) +
            t5 * t10 * 0.41818147400044842) +
           t7 * t63 * 0.000140500000000543) -
          t13 * t63 * 0.0057010000000445871) +
         t5 * t6 * t39 * 6.7800000000395322E-7) +
        t7 * t11 * t39 * 0.0057010000000445871) +
       t11 * t13 * t39 * 0.000140500000000543);
  G[4] = -(
      g * (((((((((t23 * 6.7800000000395322E-7 + t41 * 0.00014780400000091731) +
                  t42 * 6.7800000000395322E-7) +
                 t6 * t55 * 6.7800000000395322E-7) -
                t7 * t57 * 0.0057010000000445871) +
               t12 * t55 * 0.41818147400044842) -
              t13 * t57 * 0.000140500000000543) -
             b_t57_tmp * 0.00014780400000091731) -
            t6 * t7 * t55 * 0.000140500000000543) +
           t6 * t13 * t55 * 0.0057010000000445871));
  G[5] = g * (((((t10 * 0.41818147400044842 + t60 * 0.41818147400044842) -
                 t61 * 6.7800000000395322E-7) +
                t49_tmp * 6.7800000000395322E-7) +
               t7 * t66 * 0.000140500000000543) -
              t13 * t66 * 0.0057010000000445871);
  G[6] =
      g *
      (((t7 * t55 * 0.000140500000000543 - t13 * t55 * 0.0057010000000445871) +
        t7 * t65 * 0.0057010000000445871) +
       t13 * t65 * 0.000140500000000543);
}

// End of code generation (GravityMatrix.cpp)
