//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: kinova_G_gripper.cpp
//
// MATLAB Coder version            : 5.2
// C/C++ source code generated on  : 12-Aug-2022 19:02:57
//

// Include Files
#include "kinova_G_gripper.h"
#include <math.h>

// Function Definitions
//
// KINOVA_G_GRIPPER
//     G =
//     KINOVA_G_GRIPPER(X2,X3,X4,X5,X6,X7,Y2,Y3,Y4,Y5,Y6,Y7,Z2,Z3,Z4,Z5,Z6,Z7,Z8,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,G,M2,M3,M4,M5,M6,M7,M8,Q1,Q2,Q3,Q4,Q5,Q6,Q7)
//
// Arguments    : double g
//                double q1
//                double q2
//                double q3
//                double q4
//                double q5
//                double q6
//                double q7
//                double G[7]
// Return Type  : void
//
void kinova_G_gripper(double g, double q1, double q2, double q3, double q4,
                      double q5, double q6, double q7, double G[7])
{
  double t10;
  double t102;
  double t103;
  double t104;
  double t105;
  double t106;
  double t11;
  double t114;
  double t114_tmp;
  double t119;
  double t12;
  double t120;
  double t121;
  double t125;
  double t129;
  double t13;
  double t131;
  double t131_tmp;
  double t132;
  double t138;
  double t139;
  double t14;
  double t141;
  double t141_tmp;
  double t146;
  double t148;
  double t15;
  double t150;
  double t151;
  double t152;
  double t153;
  double t157;
  double t158;
  double t160;
  double t166;
  double t168;
  double t175_tmp;
  double t176;
  double t2;
  double t27;
  double t28;
  double t3;
  double t30;
  double t31;
  double t32;
  double t33;
  double t35;
  double t37_tmp;
  double t39;
  double t4;
  double t40_tmp;
  double t43_tmp;
  double t48;
  double t5;
  double t51;
  double t52;
  double t52_tmp;
  double t54;
  double t55;
  double t57;
  double t6;
  double t66;
  double t69;
  double t7;
  double t70;
  double t71;
  double t72;
  double t78;
  double t79;
  double t8;
  double t80;
  double t81;
  double t88;
  double t89;
  double t9;
  double t91;
  double t95;
  double t96;
  double t98;
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     12-Aug-2022 13:42:38
  //  參數設定
  t2 = cos(q1);
  t3 = cos(q2);
  t4 = cos(q3);
  t5 = cos(q4);
  t6 = cos(q5);
  t7 = cos(q6);
  t8 = cos(q7);
  t9 = sin(q1);
  t10 = sin(q2);
  t11 = sin(q3);
  t12 = sin(q4);
  t13 = sin(q5);
  t14 = sin(q6);
  t15 = sin(q7);
  t27 = 0.0064 * t2;
  t28 = 0.0064 * t9;
  t30 = t2 * t4;
  t31 = t2 * t11;
  t32 = t4 * t9;
  t33 = t9 * t11;
  t37_tmp = 0.2104 * t2 * t10;
  t40_tmp = 0.2104 * t9 * t10;
  t43_tmp = t9 * t10;
  t48 = t2 * t5 * t10;
  t51 = t5 * t9 * t10;
  t52_tmp = t2 * t10;
  t52 = t52_tmp * 0.092508;
  t35 = 0.0064 * t30;
  t39 = 0.0064 * t32;
  t4 = t3 * t31;
  t11 = t3 * t33;
  t55 = 0.2084 * t48;
  t57 = 0.2084 * t51;
  t54 = 0.0064 * t4;
  t66 = -0.0064 * t11;
  t10 = t31 + t3 * t32;
  t69 = t32 + t4;
  t70 = -4.4E-5 * t10;
  t71 = 0.0064 * t69;
  t72 = t30 + -t11;
  t11 = t33 + -(t3 * t30);
  t4 = t12 * t10;
  t81 = -0.0086059999999999991 * t69;
  t91 = -0.013041 * t69;
  t78 = 0.2084 * t4;
  t79 = -4.4E-5 * t11;
  t80 = 0.0064 * t72;
  t31 = t12 * t11;
  t89 = -0.0086059999999999991 * t72;
  t95 = -0.013041 * t72;
  t96 = t51 + t4;
  t4 = t43_tmp * t12 - t5 * t10;
  t106 = 1.8E-5 * t4;
  t88 = 0.2084 * t31;
  t98 = 0.1059 * t96;
  t11 = t52_tmp * t12 + t5 * t11;
  t10 = t7 * t96;
  t102 = 0.13292199999999998 * t96;
  t103 = 0.042017 * t96;
  t114_tmp = t48 - t31;
  t114 = -0.1059 * t114_tmp;
  t32 = -t7 * t114_tmp;
  t120 = 0.13292199999999998 * t114_tmp;
  t121 = 0.042017 * t114_tmp;
  t31 = t13 * t72 + -t6 * t4;
  t141_tmp = t6 * t72 + t13 * t4;
  t141 = 0.00965 * t141_tmp;
  t146 = -0.009432 * t141_tmp;
  t104 = 0.1059 * t10;
  t105 = -1.8E-5 * t11;
  t119 = 0.1059 * t32;
  t132 = 1.0E-6 * t31;
  t4 = t14 * t31;
  t33 = t13 * t69 + t6 * t11;
  t131_tmp = t6 * t69 - t13 * t11;
  t131 = 0.00965 * t131_tmp;
  t138 = 0.1059 * t4;
  t139 = -0.009432 * t131_tmp;
  t148 = t10 + t4;
  t125 = 1.0E-6 * t33;
  t4 = t14 * t33;
  t11 = t14 * t96 + -(t7 * t31);
  t151 = 0.060416999999999992 * t148;
  t152 = 0.1815 * t148;
  t166 = 0.093474385964912282 * t148;
  t129 = 0.1059 * t4;
  t150 = t32 + t4;
  t153 = 1.0E-6 * t11;
  t4 = t7 * t33 + t14 * t114_tmp;
  t160 = -1.0E-6 * t4;
  t13 = 1.0E-6 * t4;
  t176 = -9.8596491228070173E-5 * (t8 * t4 + t15 * t131_tmp);
  t14 = 0.0040007017543859649 * (-t8 * t131_tmp + t15 * t4);
  t157 = 0.060416999999999992 * t150;
  t158 = 0.1815 * t150;
  t168 = 0.093474385964912282 * t150;
  t175_tmp = -9.8596491228070173E-5 * (-t15 * t141_tmp + t8 * t11);
  t33 = -0.0040007017543859649 * (t8 * t141_tmp + t15 * t11);
  G[0] = 0.0;
  t30 = ((t27 + t35) + t40_tmp) + t40_tmp;
  t51 = t28 + t39;
  t4 = (((t30 + t57) + t66) + t78) + t80;
  t31 = t4 + t98;
  t5 = (t31 + t104) + t138;
  t11 = (((((t51 + t54) + -t37_tmp) + -t37_tmp) + -t55) + t71) + t88;
  t32 = t11 + t114;
  t12 = (t32 + t119) + t129;
  t48 = -(t43_tmp * 0.092508);
  t6 = -g * 0.678;
  G[1] =
      (((-g * 1.1636 *
             (t9 * ((((t30 + t48) + t66) + t70) + t95) -
              t2 * ((((((t51 + t52) + t54) + -t37_tmp) + -t37_tmp) + t79) +
                    t91)) -
         g * 1.1636 *
             (t2 * ((((-t28 + t37_tmp) + t9 * -0.0068779999999999996) +
                     -4.4E-5 * t2 * t3) -
                    t52_tmp * 0.11082) +
              t9 * ((((t27 + t40_tmp) - t2 * -0.0068779999999999996) +
                     -4.4E-5 * t3 * t9) -
                    t43_tmp * 0.11082))) -
        g * 1.425 *
            (t9 *
                 ((((t5 + t152) + -(0.093474385964912282 * t148)) + -t175_tmp) +
                  t33) -
             t2 * ((((t12 + t158) + -(0.093474385964912282 * t150)) + t176) +
                   t14))) -
       g * 0.678 *
           (t9 * (((t5 + t141) + -t151) + -t153) -
            t2 * (((t12 + t131) + -t157) + t13))) +
      (t6 * (t9 * (((t31 + -(0.042017 * t96)) + t132) + t146) -
             t2 * (((t32 + t121) + t125) + t139)) -
       g * 0.93 *
           (t9 * (((t4 + -(-0.0086059999999999991 * t72)) + t106) +
                  -(0.13292199999999998 * t96)) -
            t2 * (((t11 + -(-0.0086059999999999991 * t69)) + t105) + t120)));
  t30 = t35 + t40_tmp;
  t51 = (((t30 + t57) + t66) + t78) + t80;
  t5 = ((((t39 + t54) + -t37_tmp) + -t55) + t71) + t88;
  t31 = t51 + t98;
  t12 = (t31 + t104) + t138;
  t32 = t5 + t114;
  t10 = (t32 + t119) + t129;
  G[2] = (((g * 0.93 *
                (t52_tmp * (((t51 + -t89) + t106) + -t102) +
                 t43_tmp * (((t5 + -t81) + t105) + t120)) +
            g * 1.1636 *
                (t52_tmp * ((((t30 + t48) + t66) + t70) + t95) +
                 t43_tmp * (((((t39 + t52) + t54) + -t37_tmp) + t79) + t91))) +
           g * 1.425 *
               (t52_tmp * ((((t12 + t152) + -t166) + -t175_tmp) + t33) +
                t43_tmp * ((((t10 + t158) + -t168) + t176) + t14))) +
          g * 0.678 *
              (t52_tmp * (((t12 + t141) + -t151) + -t153) +
               t43_tmp * (((t10 + t131) + -t157) + t13))) +
         g * 0.678 *
             (t52_tmp * (((t31 + -t103) + t132) + t146) +
              t43_tmp * (((t32 + t121) + t125) + t139));
  t30 = (t57 + t78) + t80;
  t51 = (-t55 + t71) + t88;
  t5 = t51 + t114;
  t12 = t30 + t98;
  t48 = (t12 + t104) + t138;
  t10 = -0.00965 * t131_tmp;
  t11 = 0.1059 * t114_tmp;
  t4 = 0.1059 * t7 * t114_tmp;
  G[3] =
      ((t6 * (t69 * (((t12 + -t103) + t132) + t146) -
              t72 * (((t5 + t121) + t125) + t139)) -
        g * 0.93 *
            (t69 * (((t30 + -t89) + t106) + -t102) -
             t72 * (((t51 + -t81) + t105) + t120))) +
       g * 1.425 *
           (t72 * ((((((t5 + t119) + t129) + t158) + -t168) + t176) + t14) -
            t69 * ((((t48 + t152) + -t166) + -t175_tmp) + t33))) -
      g * 0.678 *
          (t69 * (((t48 + t141) + -t151) + -t153) +
           t72 *
               ((((((((t55 - t71) - t88) - t129) + t157) + t160) + t10) + t11) +
                t4));
  t30 = (t98 + t104) + t138;
  t51 = ((-t129 + t157) + t160) + t10;
  G[4] =
      (g * 0.678 *
           (t114_tmp * (((t30 + t141) + -t151) + -t153) -
            t96 * ((t51 + t11) + t4)) +
       g * 1.425 *
           (t96 * ((((((t114 + t119) + t129) + t158) + -t168) + t176) + t14) +
            t114_tmp * ((((t30 + t152) + -t166) + -t175_tmp) + t33))) +
      g * 0.678 *
          (t96 * (((t114 + t121) + t125) + t139) +
           t114_tmp * (((t98 + -t103) + t132) + t146));
  t30 = -g * 1.425;
  G[5] =
      t30 * (t131_tmp * (((((t104 + t138) + t152) + -t166) + -t175_tmp) + t33) -
             t141_tmp * (((((t119 + t129) + t158) + -t168) + t176) + t14)) -
      g * 0.678 *
          (t141_tmp * (t51 + t4) -
           t131_tmp * ((((-t104 - t138) + t151) + t153) + -0.00965 * t141_tmp));
  G[6] = t30 * (t150 * (((t152 + -t166) + -t175_tmp) + t33) -
                t148 * (((t158 + -t168) + t176) + t14));
}

//
// File trailer for kinova_G_gripper.cpp
//
// [EOF]
//
