//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// kinova_FK.cpp
//
// Code generation for function 'kinova_FK'
//

// Include files
#include "kinova_FK.h"
#include "rotm2axang.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Definitions
void kinova_FK(double q1, double q2, double q3, double q4, double q5, double q6,
               double q7, double X[6])
{
  double b_t15[16];
  double c_t15[9];
  double d_t15[4];
  double dv[4];
  double theta0e[4];
  double b_t121_tmp;
  double et15_tmp;
  double t10;
  double t100;
  double t101;
  double t106;
  double t11;
  double t110;
  double t112;
  double t115;
  double t12;
  double t121;
  double t121_tmp;
  double t122;
  double t123;
  double t124;
  double t125;
  double t126;
  double t128;
  double t13;
  double t130;
  double t134;
  double t135;
  double t137;
  double t139;
  double t14;
  double t140;
  double t143;
  double t144;
  double t146_tmp;
  double t147;
  double t15;
  double t150;
  double t152;
  double t154;
  double t156;
  double t157;
  double t158;
  double t163;
  double t166;
  double t167;
  double t168_tmp;
  double t169;
  double t170;
  double t171;
  double t172;
  double t173_tmp;
  double t174;
  double t175;
  double t178;
  double t179_tmp;
  double t180;
  double t185;
  double t186;
  double t189;
  double t189_tmp;
  double t194;
  double t194_tmp;
  double t198;
  double t2;
  double t202;
  double t205;
  double t206_tmp;
  double t207;
  double t209;
  double t217;
  double t218;
  double t22;
  double t220;
  double t227;
  double t229;
  double t23;
  double t236_tmp;
  double t236_tmp_tmp;
  double t24;
  double t25;
  double t26;
  double t29;
  double t3;
  double t31;
  double t33;
  double t37;
  double t4;
  double t40;
  double t41;
  double t43;
  double t46;
  double t48;
  double t5;
  double t53;
  double t55;
  double t59;
  double t6;
  double t60;
  double t62;
  double t63;
  double t64;
  double t66;
  double t69;
  double t7;
  double t71;
  double t72;
  double t74;
  double t75;
  double t78;
  double t79;
  double t8;
  double t82;
  double t85;
  double t86;
  double t9;
  double t91;
  double t96;
  double t98;
  int i;
  // KINOVA_FK
  //     ABASE7 =
  //     KINOVA_FK(D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,Q1,Q2,Q3,Q4,Q5,Q6,Q7)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     13-Sep-2022 22:08:18
  //  參數設定
  t2 = std::cos(q1);
  t3 = std::cos(q2);
  t4 = std::cos(q3);
  t5 = std::cos(q4);
  t6 = std::cos(q5);
  t7 = std::cos(q6);
  t8 = std::cos(q7);
  t9 = std::sin(q1);
  t10 = std::sin(q2);
  t11 = std::sin(q3);
  t12 = std::sin(q4);
  t13 = std::sin(q5);
  t14 = std::sin(q6);
  t15 = std::sin(q7);
  t22 = t2 * t10;
  t23 = t3 * t9;
  t24 = t9 * t10;
  t25 = t2 * 1.224646799147353E-16;
  t26 = t2 * 6.123233995736766E-17;
  t40 = t2 * 7.498798913309288E-33;
  t41 = t2 * 3.749399456654644E-33;
  t63 = t2 * 4.591690043316935E-49;
  t64 = t2 * 2.2958450216584679E-49;
  t85 = t2 * 1.405799628556214E-65;
  t86 = t2 * 2.811599257112428E-65;
  t106 = t2 * 8.6080400767695281E-82;
  t122 = t2 * 1.054180872694794E-97;
  t29 = t24 * 1.224646799147353E-16;
  t31 = t22 * 6.123233995736766E-17;
  t33 = t24 * 6.123233995736766E-17;
  t43 = t24 * 7.498798913309288E-33;
  t46 = t23 * 3.749399456654644E-33;
  t48 = t24 * 3.749399456654644E-33;
  t66 = t24 * 4.591690043316935E-49;
  t69 = t24 * 2.2958450216584679E-49;
  t91 = t24 * 1.405799628556214E-65;
  t110 = t24 * 1.7216080153539061E-81;
  t53 = t3 * (t40 - 1.0);
  t55 = t3 * (t26 + 1.224646799147353E-16);
  t75 = (t9 + t31) + t46;
  t3 = t2 * t3 + -t33;
  t59 = t23 + t10 * (t26 + 1.224646799147353E-16);
  t71 = t53 * 6.123233995736766E-17;
  t72 = t55 * 6.123233995736766E-17;
  t74 = t23 * 1.224646799147353E-16 + t10 * (t40 - 1.0);
  t79 = t4 * t75;
  t112 = t55 * 2.2958450216584679E-49;
  t123 = t53 * 1.405799628556214E-65;
  t124 = t55 * 1.405799628556214E-65;
  t37 = t11 * t3;
  t62 = t11 * t59;
  t78 = t11 * t74;
  t96 = -(t55 * 3.749399456654644E-33);
  t101 = t79 * 6.123233995736766E-17;
  t125 = -(t53 * 1.405799628556214E-65);
  t10 = ((t2 + -t33) + t72) - 7.498798913309288E-33;
  t134 = ((t25 + -t43) + t71) + 6.123233995736766E-17;
  t60 = t37 * 6.123233995736766E-17;
  t82 = t62 * 6.123233995736766E-17;
  t98 = t62 * 3.749399456654644E-33;
  t100 = t78 * 6.123233995736766E-17;
  t115 = t62 * 2.2958450216584679E-49;
  t121_tmp = t4 * t3 - t11 * t75;
  b_t121_tmp = t12 * t121_tmp;
  t121 = b_t121_tmp * 6.123233995736766E-17;
  t126 = t78 * 2.2958450216584679E-49;
  t130 = t4 * t10;
  t135 = t4 * t134;
  t128 = -(t78 * 2.2958450216584679E-49);
  t137 = t130 * 6.123233995736766E-17;
  t139 = t130 * 3.749399456654644E-33;
  t140 = t135 * 6.123233995736766E-17;
  t10 = t4 * t59 + t11 * t10;
  t146_tmp =
      (t22 + -(t9 * 6.123233995736766E-17)) + t23 * 6.123233995736766E-17;
  t75 = (t146_tmp + t60) + t101;
  t150 = t130 * 2.2958450216584679E-49;
  t154 = t135 * 2.2958450216584679E-49;
  t3 = t4 * t74 + t11 * t134;
  t143 = t12 * t10;
  t144 = t5 * t10;
  t147 = t5 * t75;
  t157 = t5 * t3;
  t158 = t12 * t3;
  t152 = t143 * 6.123233995736766E-17;
  t59 = t147 * 6.123233995736766E-17;
  t156 = t143 * 3.749399456654644E-33;
  t11 = t158 * 6.123233995736766E-17;
  t163 = t158 * 3.749399456654644E-33;
  t75 = -t5 * t121_tmp + t12 * t75;
  t168_tmp = (t24 + t26) + -t55;
  t3 = ((t168_tmp + t82) + -t137) - 4.591690043316935E-49;
  t173_tmp = (t29 + t40) + -t53;
  t10 = ((t173_tmp + t100) + -t140) + 3.749399456654644E-33;
  t166 = t13 * t75;
  t169 = t5 * t3;
  t170 = t12 * t3;
  t174 = t5 * t10;
  t175 = t12 * t10;
  t179_tmp = (((-t31 + t37) + t9 * 3.749399456654644E-33) + -t46) + t79;
  t3 = (t179_tmp + t121) + t59;
  t167 = t166 * 6.123233995736766E-17;
  t171 = t169 * 6.123233995736766E-17;
  t172 = t169 * 3.749399456654644E-33;
  t134 = t174 * 6.123233995736766E-17;
  t178 = t174 * 3.749399456654644E-33;
  t180 = t6 * t3;
  t10 = t144 - t170;
  t185 = -t13 * t10;
  t189_tmp = t13 * t10;
  t189 = t189_tmp * 6.123233995736766E-17;
  t4 = t157 - t175;
  t194_tmp = t13 * t4;
  t194 = t194_tmp * -6.123233995736766E-17;
  t186 = t180 * 6.123233995736766E-17;
  t74 = t6 * t75 + t13 * t3;
  t3 = ((((((-t33 + -t41) + t62) + t72) + -t130) + t152) + t171) +
       2.811599257112428E-65;
  t198 = t14 * t74;
  t202 = t6 * t3;
  t206_tmp = (((t43 + t63) + -t71) + -t78) + t135;
  t75 = ((t206_tmp + -t11) + -t134) + 2.2958450216584679E-49;
  t205 = t202 * 6.123233995736766E-17;
  t207 = t6 * t75;
  t10 = -t6 * t10 + t13 * t3;
  t209 = t207 * 6.123233995736766E-17;
  t217 = t14 * t10;
  t3 = t6 * t4 + t13 * t75;
  t236_tmp_tmp =
      ((((t22 * 3.749399456654644E-33 - t60) - t9 * 2.2958450216584679E-49) +
        t23 * 2.2958450216584679E-49) -
       t101) +
      t147;
  t75 = ((t236_tmp_tmp - t167) + t186) + b_t121_tmp;
  t236_tmp = t7 * t75;
  t59 =
      (((((((((t22 * 2.2958450216584679E-49 + -(t37 * 3.749399456654644E-33)) +
              -(t9 * 1.405799628556214E-65)) +
             t23 * 1.405799628556214E-65) +
            -(t79 * 3.749399456654644E-33)) +
           t121) +
          t59) +
         t166) +
        -t180) +
       t198 * 6.123233995736766E-17) +
      t236_tmp * -6.123233995736766E-17;
  t218 = t217 * 6.123233995736766E-17;
  t220 = t7 * t3;
  t6 = t14 * t3;
  t121 = (((((t48 + t64) + -t82) + -(t55 * 3.749399456654644E-33)) + t137) +
          t143) +
         t169;
  t227 = t7 * (((t121 + t189) + t205) + -1.7216080153539061E-81);
  t229 = t227 * 6.123233995736766E-17;
  et15_tmp =
      (((((t66 + t86) + -(t53 * 3.749399456654644E-33)) + -t100) + t140) +
       t158) +
      t174;
  t3 = (et15_tmp + t194_tmp * 6.123233995736766E-17) + -t209;
  t46 =
      t7 * t10 +
      t14 * (((((((((t48 + t64) + -t82) + t96) + t137) + t143) + t169) + t189) +
              t205) +
             -1.7216080153539061E-81);
  t101 = -(t227 * 6.123233995736766E-17);
  t60 = t14 * (t3 + 1.405799628556214E-65);
  t31 = t7 * (t3 + 1.405799628556214E-65);
  t12 = (((((((((t24 * 2.811599257112428E-65 + t2 * 1.7216080153539061E-81) +
                -(t53 * 2.2958450216584679E-49)) +
               -(t78 * 3.749399456654644E-33)) +
              t135 * 3.749399456654644E-33) +
             t11) +
            t134) +
           -t13 * t4) +
          t207) +
         -(t6 * 6.123233995736766E-17)) +
        -(t31 * 6.123233995736766E-17);
  //  加入軸角表示式
  t11 = t7 * t74 + t14 * t75;
  t121_tmp = t15 * t59 - t8 * t11;
  b_t15[0] = t121_tmp;
  b_t15[1] =
      t8 * t46 -
      t15 *
          (((((((((((t69 + t85) - t98) - t112) + t139) + t152) + t171) + t185) +
              -t202) +
             t218) +
            t101) +
           -1.054180872694794E-97);
  t5 = t220 - t60;
  b_t15[2] = t15 * (t12 + 8.6080400767695281E-82) + t8 * t5;
  b_t15[3] = 0.0;
  t4 = t8 * t59;
  t11 *= t15;
  t75 = ((((((((t9 * 1.054180872694794E-97 + t22 * -1.7216080153539061E-81) +
               t23 * -1.054180872694794E-97) +
              t37 * 2.811599257112428E-65) +
             t79 * 2.811599257112428E-65) +
            t147 * -4.591690043316935E-49) +
           (t166 * -7.498798913309288E-33 + t180 * 7.498798913309288E-33)) +
          ((t198 * 1.224646799147353E-16 - t4) - t11)) +
         b_t121_tmp * -4.591690043316935E-49) +
        t236_tmp * -1.224646799147353E-16;
  b_t15[4] = t75;
  t59 = t15 * t46;
  t74 = t8 *
        (((((((((((t69 + t85) - t98) - t112) + t139) + t152) + t171) + t185) +
            -t202) +
           t218) +
          -t229) +
         -1.054180872694794E-97);
  b_t15[5] =
      ((((((((t55 * -1.7216080153539061E-81 - t62 * 2.811599257112428E-65) +
             t110) +
            t122) +
           t130 * 2.811599257112428E-65) +
          t143 * 4.591690043316935E-49) +
         t169 * 4.591690043316935E-49) +
        (t202 * -7.498798913309288E-33 - t217 * 1.224646799147353E-16)) +
       (((t227 * 1.224646799147353E-16 + t59) -
         t189_tmp * 7.498798913309288E-33) +
        t74)) +
      -7.9050903825951574E-130;
  t134 = t8 * (t12 + 8.6080400767695281E-82);
  t5 *= t15;
  b_t15[6] =
      ((((((((t2 * -1.2909992314680431E-113 + t24 * -2.1083617453895879E-97) +
             t53 * 1.7216080153539061E-81) +
            t78 * 2.811599257112428E-65) +
           t135 * -2.811599257112428E-65) +
          t158 * -4.591690043316935E-49) +
         t174 * -4.591690043316935E-49) +
        (t207 * -7.498798913309288E-33 - t6 * 1.224646799147353E-16)) +
       (((t31 * -1.224646799147353E-16 - t134) +
         t194_tmp * 7.498798913309288E-33) +
        t5)) +
      -6.4549961573402138E-114;
  b_t15[7] = 0.0;
  t3 = (((((((t22 * 1.405799628556214E-65 - t37 * 2.2958450216584679E-49) -
             t9 * 8.6080400767695281E-82) +
            t23 * 8.6080400767695281E-82) -
           t79 * 2.2958450216584679E-49) +
          t147 * 3.749399456654644E-33) +
         t167) +
        -t186) -
       t198;
  t10 = b_t121_tmp * 3.749399456654644E-33;
  t11 = ((t3 - t4 * 1.224646799147353E-16) - t11 * 1.224646799147353E-16) +
        (t10 + t236_tmp);
  b_t15[8] = t11;
  b_t15[9] =
      ((((((((((((-t91 - t106) + t115) + t124) - t150) - t156) - t172) + t189) +
           t205) +
          t217) -
         t227) +
        t59 * 1.224646799147353E-16) +
       t74 * 1.224646799147353E-16) +
      6.4549961573402138E-114;
  b_t15[10] =
      ((((((((((((t110 + t122) + t125) + t128) + t154) + t163) + t178) + t194) +
           t209) +
          t6) +
         t31) -
        t134 * 1.224646799147353E-16) +
       t5 * 1.224646799147353E-16) +
      5.27090436347397E-98;
  b_t15[11] = 0.0;
  t5 = ((-t9 * 0.011800000000000001 + 0.2874 * ((t3 + t10) + t236_tmp)) -
        0.0128 * t179_tmp) +
       (0.3143 * (t236_tmp_tmp + b_t121_tmp) + 0.4208 * t146_tmp);
  b_t15[12] = t5;
  b_t15[13] =
      ((3.4877940839716611E-17 -
        0.0128 *
            (((((t33 + t41) - t62) - t72) + t130) + -2.811599257112428E-65)) +
       ((-0.4208 * (t168_tmp - 4.591690043316935E-49) -
         0.2874 *
             (((((((((((t91 + t106) - t115) - t124) + t150) + t156) + t172) +
                  t189_tmp * -6.123233995736766E-17) -
                 t205) -
                t217) +
               t227) +
              -6.4549961573402138E-114)) -
        0.3143 * (t121 + -1.7216080153539061E-81))) +
      -0.011800000000000001 * (t2 - 7.498798913309288E-33);
  b_t15[14] =
      (((0.2874 *
             (((((((((((t110 + t122) + -t123) + -t126) + t154) + t163) + t178) +
                  t194) +
                 t209) +
                t6) +
               t31) +
              5.27090436347397E-98) +
         0.2848) +
        0.0128 * (t206_tmp + 2.2958450216584679E-49)) +
       0.3143 * (et15_tmp + 1.405799628556214E-65)) +
      (0.011800000000000001 * (t25 + 6.123233995736766E-17) +
       0.4208 * (t173_tmp + 3.749399456654644E-33));
  b_t15[15] = 1.0;
  for (i = 0; i < 3; i++) {
    int t15_tmp;
    t15_tmp = i << 2;
    c_t15[3 * i] = b_t15[t15_tmp];
    c_t15[3 * i + 1] = b_t15[t15_tmp + 1];
    c_t15[3 * i + 2] = b_t15[t15_tmp + 2];
  }
  coder::rotm2axang(c_t15, dv);
  //  3x1 xyz
  b_t15[0] = t121_tmp;
  b_t15[1] =
      t8 * t46 -
      t15 *
          (((((((((((t69 + t85) - t98) - t112) + t139) + t152) + t171) + t185) +
              -t202) +
             t218) +
            -t229) +
           -1.054180872694794E-97);
  b_t15[2] = t15 * (t12 + 8.6080400767695281E-82) + t8 * (t220 - t60);
  b_t15[3] = 0.0;
  b_t15[4] = t75;
  b_t15[5] =
      ((((((((t55 * -1.7216080153539061E-81 - t62 * 2.811599257112428E-65) +
             t110) +
            t122) +
           t130 * 2.811599257112428E-65) +
          t143 * 4.591690043316935E-49) +
         t169 * 4.591690043316935E-49) +
        (t202 * -7.498798913309288E-33 - t217 * 1.224646799147353E-16)) +
       (((t227 * 1.224646799147353E-16 + t15 * t46) -
         t13 * (t144 - t170) * 7.498798913309288E-33) +
        t8 * (((((((((((t69 + t85) - t98) - t112) + t139) + t152) + t171) +
                  t185) +
                 -t202) +
                t218) +
               t101) +
              -1.054180872694794E-97))) +
      -7.9050903825951574E-130;
  b_t15[6] =
      ((((((((t2 * -1.2909992314680431E-113 + t24 * -2.1083617453895879E-97) +
             t53 * 1.7216080153539061E-81) +
            t78 * 2.811599257112428E-65) +
           t135 * -2.811599257112428E-65) +
          t158 * -4.591690043316935E-49) +
         t174 * -4.591690043316935E-49) +
        (t207 * -7.498798913309288E-33 - t6 * 1.224646799147353E-16)) +
       (((t31 * -1.224646799147353E-16 - t8 * (t12 + 8.6080400767695281E-82)) +
         t13 * (t157 - t175) * 7.498798913309288E-33) +
        t15 * (t220 - t60))) +
      -6.4549961573402138E-114;
  b_t15[7] = 0.0;
  b_t15[8] = t11;
  b_t15[9] =
      ((((((((((((-t91 - t106) + t115) + t124) - t150) - t156) - t172) + t189) +
           t205) +
          t217) -
         t227) +
        t15 * t46 * 1.224646799147353E-16) +
       t8 *
           (((((((((((t69 + t85) - t98) - t112) + t139) + t152) + t171) +
                t185) +
               -t202) +
              t218) +
             t101) +
            -1.054180872694794E-97) *
           1.224646799147353E-16) +
      6.4549961573402138E-114;
  b_t15[10] =
      ((((((((((((t110 + t122) + -t123) + -t126) + t154) + t163) + t178) +
            t194) +
           t209) +
          t6) +
         t31) -
        t8 * (t12 + 8.6080400767695281E-82) * 1.224646799147353E-16) +
       t15 * (t220 - t60) * 1.224646799147353E-16) +
      5.27090436347397E-98;
  b_t15[11] = 0.0;
  b_t15[12] = t5;
  b_t15[13] =
      ((3.4877940839716611E-17 -
        0.0128 *
            (((((t33 + t41) - t62) - t72) + t130) + -2.811599257112428E-65)) +
       ((-0.4208 * (((t24 + t26) + -t55) - 4.591690043316935E-49) -
         0.2874 *
             (((((((((((t91 + t106) - t115) - t124) + t150) + t156) + t172) +
                  t13 * (t144 - t170) * -6.123233995736766E-17) -
                 t205) -
                t217) +
               t227) +
              -6.4549961573402138E-114)) -
        0.3143 * (((((((t48 + t64) + -t82) + t96) + t137) + t143) + t169) +
                  -1.7216080153539061E-81))) +
      -0.011800000000000001 * (t2 - 7.498798913309288E-33);
  b_t15[14] =
      (((0.2874 *
             (((((((((((t110 + t122) + t125) + t128) + t154) + t163) + t178) +
                  t194) +
                 t209) +
                t6) +
               t31) +
              5.27090436347397E-98) +
         0.2848) +
        0.0128 *
            (((((t43 + t63) + -t71) + -t78) + t135) + 2.2958450216584679E-49)) +
       0.3143 * (((((((t66 + t86) + -(t53 * 3.749399456654644E-33)) + -t100) +
                    t140) +
                   t158) +
                  t174) +
                 1.405799628556214E-65)) +
      (0.011800000000000001 * (t25 + 6.123233995736766E-17) +
       0.4208 * (((t29 + t40) + -t53) + 3.749399456654644E-33));
  b_t15[15] = 1.0;
  for (i = 0; i < 4; i++) {
    theta0e[i] = dv[i];
    d_t15[i] = ((b_t15[i] * 0.0 + b_t15[i + 4] * 0.0) + b_t15[i + 8] * 0.0) +
               b_t15[i + 12];
  }
  X[0] = d_t15[0];
  X[3] = theta0e[0] * theta0e[3];
  X[1] = d_t15[1];
  X[4] = theta0e[1] * theta0e[3];
  X[2] = d_t15[2];
  X[5] = theta0e[2] * theta0e[3];
  //  6x1 xyz add axis angle
}

// End of code generation (kinova_FK.cpp)
